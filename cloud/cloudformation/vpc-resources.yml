AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  Environment:
    Description: Global environment
    Type: String
Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ['-', ['vpc', !Ref Environment]]
  PublicSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref "VPC"
      CidrBlock: "10.0.0.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-a

  PublicSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref "VPC"
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-b

  PublicSubnetC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref "VPC"
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-c

  PrivateSubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref "VPC"
      CidrBlock: "10.0.3.0/24"
      Tags:
        - Key: Name
          Value: private-subnet-a

  PrivateSubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref "VPC"
      CidrBlock: "10.0.4.0/24"
      Tags:
        - Key: Name
          Value: private-subnet-b

  PrivateSubnetC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: 'AWS::Region'
      VpcId: !Ref "VPC"
      CidrBlock: "10.0.5.0/24"
      Tags:
        - Key: Name
          Value: private-subnet-c

  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref "InternetGateway"

  InternetRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  PublicSubnetARouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnetB

  PublicSubnetCRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnetC

Outputs:
  VpcId:
    Description: The VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub vpc-${Environment}
  PrivateSubnetA:
    Description: Private Subnet A
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub private-subnet-a-${Environment}
  PrivateSubnetAArn:
    Description: Private Subnet A arn
    Value: !Sub
      - arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetA}
      - PrivateSubnetA: !Ref PrivateSubnetA
    Export:
      Name: !Sub private-subnet-a-${Environment}-arn
  PrivateSubnetB:
    Description: Private Subnet B
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub private-subnet-b-${Environment}
  PrivateSubnetBArn:
    Description: Private Subnet B arn
    Value: !Sub
      - arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetB}
      - PrivateSubnetB: !Ref PrivateSubnetB
    Export:
      Name: !Sub private-subnet-b-${Environment}-arn
  PrivateSubnetC:
    Description: Private Subnet C
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Sub private-subnet-c-${Environment}
  PrivateSubnetCArn:
    Description: Private Subnet C arn
    Value: !Sub
      - arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PrivateSubnetC}
      - PrivateSubnetC: !Ref PrivateSubnetC
    Export:
      Name: !Sub private-subnet-c-${Environment}-arn
  PublicSubnetA:
    Description: Public Subnet A
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub public-subnet-a-${Environment}
  PublicSubnetAArn:
    Description: Public Subnet A arn
    Value: !Sub
      - arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PublicSubnetA}
      - PublicSubnetA: !Ref PublicSubnetA
    Export:
      Name: !Sub public-subnet-a-${Environment}-arn
  PublicSubnetB:
    Description: Public Subnet B
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub public-subnet-b-${Environment}
  PublicSubnetBArn:
    Description: Public Subnet B arn
    Value: !Sub
      - arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PublicSubnetB}
      - PublicSubnetB: !Ref PublicSubnetB
    Export:
      Name: !Sub public-subnet-b-${Environment}-arn
  PublicSubnetC:
    Description: Public Subnet C
    Value: !Ref PublicSubnetC
    Export:
      Name: !Sub public-subnet-c-${Environment}
  PublicSubnetCArn:
    Description: Public Subnet C arn
    Value: !Sub
      - arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${PublicSubnetC}
      - PublicSubnetC: !Ref PublicSubnetC
    Export:
      Name: !Sub public-subnet-c-${Environment}-arn